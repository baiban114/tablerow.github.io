<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on 彦祖，你又来了</title>
    <link>https://baiban114.github.io/tablerow.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on 彦祖，你又来了</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 09 Apr 2022 18:53:28 +0800</lastBuildDate><atom:link href="https://baiban114.github.io/tablerow.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络寻址</title>
      <link>https://baiban114.github.io/tablerow.github.io/posts/%E7%BD%91%E7%BB%9C%E5%AF%BB%E5%9D%80/</link>
      <pubDate>Sat, 09 Apr 2022 18:53:28 +0800</pubDate>
      
      <guid>https://baiban114.github.io/tablerow.github.io/posts/%E7%BD%91%E7%BB%9C%E5%AF%BB%E5%9D%80/</guid>
      <description>套接字 URL URL（统一资源定位符）是Internet上资源的地址，可以定义为引用地址的字符串，用于指示资源的位置以及用于访问它的协议。
URL是在网络上定位资源的最普遍使用的方式，它提供了一种通过描述其网络位置或主要访问机制来检索物理位置的表示的方法。
URL中描述了协议，该URL用于检索资源和资源名称。如果资源是Web类型资源，则URL在开头包含http / https。同样，如果资源是文件，则以ftp开头，如果资源是电子邮件地址，则以mailto开头。
URL包含以下信息：
1、用于访问资源的协议
2、服务器的位置（无论是通过IP地址还是域名）
3、服务器上的端口号（可选）
4、资源在服务器目录结构中的位置
5、片段标识符（可选）
 端口是只在http默认80还是？  例：https://blog.csdn.net/qq_44915801
URI URI（统一资源标识符）是标识逻辑或物理资源的字符序列，与URL类似，也是一串字符。通过使用位置，名称或两者来标识Internet上的资源；它允许统一识别资源。
有两种类型的URI，统一资源标识符（URL）和统一资源名称（URN）。
任何URI的通用形式都是：
scheme：[// [user：password @] host [：port]] [/] path [？查询] [#片段]
Scheme（方案）：该方案列出了具体语法和URI的任何相关协议。方案不区分大小写，后跟冒号。理想情况下，URI方案应该在互联网号码分配机构（IANA）注册，但也可以使用非注册方案。
权限组件：权限组件由多个部分组成：可选的身份验证部分，主机（由注册名称或IP地址组成） , 以及可选的端口号。身份验证部分包含用户名和密码，用冒号分隔，后跟at（@）符号。在@之后是主机名，然后是冒号，然后是一个端口号。请务必注意，IPv4地址必须采用点十进制表示法，并且IPv6地址必须括在括号中。
查询（可选）：查询包含一串非分层数据。虽然语法没有明确定义，但通常是由分隔符分隔的属性值对序列，例如＆符号或分号。查询通过问号与前一部分分开。
片段（可选）：片段包含片段标识符，该标识符为辅助资源提供方向。
URL和URI之间的主要区别
URL是统一资源定位器，用于标识资源；URI（统一资源标识符）提供了更简单和可扩展的标识资源的方法。URL是URI的子集
1、作用的区别
URL（统一资源定位符）主要用于链接网页，网页组件或网页上的程序，借助访问方法（http，ftp，mailto等协议）来检索位置资源。
URI（统一资源标识符）用于定义项目的标识，此处单词标识符表示无论使用的方法是什么（URL或URN），都要将一个资源与其他资源区分开来。
2、可以说URL是URI（URL是URI的子集），但URI永远不能是URL。
3、协议区别
URL指定要使用的协议类型，而URI不涉及协议规范。</description>
    </item>
    
    <item>
      <title>应用层网络协议</title>
      <link>https://baiban114.github.io/tablerow.github.io/posts/%E5%BA%94%E7%94%A8%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Sat, 28 Aug 2021 16:16:32 +0800</pubDate>
      
      <guid>https://baiban114.github.io/tablerow.github.io/posts/%E5%BA%94%E7%94%A8%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</guid>
      <description>网络协议：约定的信息传输的格式，如几个字节是消息头、消息头记录什么信息之类的； c/s架构：不一定是两台计算机，而是两个应用、两个端口 工具：实际使用中不用手动封装协议再发消息，而是直接使用封装的软件、库等实现功能。如SSH工具OpenSSH  命令行可用 SSH Secure Shell(SSH 安全外壳协议) 是由 IETF(The Internet Engineering Task Force) 制定的建立在应用层基础上的安全网络==协议==。它是专为远程登录会话(甚至可以用Windows远程登录Linux服务器进行文件互传)和其他网络服务提供安全性的协议，可有效弥补网络中的漏洞。通过SSH，可以把所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。
优点：
 安全！ 方便！两台机器间不用输入账号密码就可验证身份！（通过保存在服务器和客户端上的密钥）；  ssh可以传输文本与二进制文件；
主要应用：
 远程登录（可免密码）、github仓库操作 文件传输（如hdfs）  SSH的安全机制 SSH之所以能够保证安全，原因在于它采用了==非对称加密技术(RSA)==加密了所有传输的数据。
传统的网络服务程序，如FTP、Pop和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到==中间人==（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。
但并不是说SSH就是绝对安全的，因为它本身提供两种级别的验证方法：
 第一种级别（基于口令的安全验证）：只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人攻击”这种方式的攻击。   传统的账号密码验证？
  第二种级别（基于密钥的安全验证）：你必须为自己创建一对密钥，并把公钥放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密钥进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下（该服务器上你用的账号）寻找你（客户端）的公钥，然后把它和你发送过来的公钥进行比较。如果两个密钥一致，服务器就用公钥加密“质询”(challenge)并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私钥在本地解密再把它发送给服务器完成登录。与第一种级别相比，第二种级别不仅加密所有传输的数据，也不需要在网络上传送口令，因此安全性更高，可以有效防止中间人攻击。  使用  有没有命令行传文件的例子？传id的是个专门的命令  ####基于密钥的安全验证-事前准备
常用于免密登录。如果想通过输入密码的方式登录则不需要这步准备。
在本机生成一对密钥（即私钥与公钥）：
ssh-keygen -t rsa #-t表示类型选项，这里采用rsa加密算法 然后根据提示一步步的按enter键即可（其中有一个提示是要求设置私钥口令passphrase，不设置则为空，这里看心情吧，如果不放心私钥的安全可以设置一下），执行结束以后会在 /home/当前用户 目录下生成一个 .ssh 文件夹,其中包含私钥文件 id_rsa 和公钥文件 id_rsa.pub。（还有known_hosts不知道有用没） 将公钥复制到远程主机中
使用ssh-copy-id命令将公钥复制到远程主机。ssh-copy-id会将公钥写到远程主机的 ~/ .ssh/authorized_keys文件中
ssh-copy-id 用户名@ip 这样以后登录这台远程主机就不用账号密码了~
服务端准备 centos7和windows默认带有SSH工具；（OpenSSH?）可以用一下命令检查：
rpm -qa | grep ssh 首先确认服务器上的ssh-server是否已经启动了</description>
    </item>
    
  </channel>
</rss>
